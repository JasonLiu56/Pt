<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jxcia.pt.mapper.UserMapper">

    <resultMap id="UserResultMap" type="User">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="nickname" column="nickname" />
        <result property="password" column="password" />
        <result property="enabled" column="enabled" />
        <result column="account_non_expired" property="accountNonExpired" />
        <result column="account_non_locked" property="accountNonLocked" />
        <result column="credentials_non_expired" property="credentialsNonExpired" />
        <result column="updated_at" property="updatedAt"/>
        <result column="is_deleted" property="isDeleted"/>
        <collection property="roles" ofType="Role">
            <id column="r_id" property="id" />
            <result column="r_name" property="name" />
            <result column="r_name_zh" property="nameZh" />
            <result column="r_updated_at" property="updatedAt"/>
            <result column="r_is_deleted" property="isDeleted"/>
        </collection>
    </resultMap>

    <select id="loadUserByUsername" resultMap="UserResultMap">
        select u.id, u.username, u.nickname, u.password, u.enabled, u.account_non_expired, u.account_non_locked, u.credentials_non_expired, u.updated_at, u.is_deleted,
        r.id as r_id, r.name as r_name, r.name_zh as r_name_zh, r.updated_at as r_updated_at, r.is_deleted as r_is_deleted
        from user u left join user_role ur on u.id = ur.uid left join role r on r.id = ur.rid
        where u.username = #{username} and u.is_deleted = 0 and ur.is_deleted = 0 and r.is_deleted = 0;
    </select>

    <insert id="insert" useGeneratedKeys="true">
        insert user(username, nickname, password) value(#{username}, #{nickname}, #{password});
    </insert>

    <update id="delete">
        update user set is_deleted = 1 where id = #{id} and is_deleted = 0;
    </update>

    <update id="updateNickname">
        update user set nickname = #{nickname} where id = #{id} and is_deleted = 0;
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id} and is_deleted = 0;
    </update>

    <select id="findById" resultMap="UserResultMap">
        select u.id, u.username, u.nickname, u.password, u.enabled, u.account_non_expired, u.account_non_locked, u.credentials_non_expired, u.updated_at, u.is_deleted,
        r.id as r_id, r.name as r_name, r.name_zh as r_name_zh, r.updated_at as r_updated_at, r.is_deleted as r_is_deleted
        from user u left join user_role ur on u.id = ur.uid left join role r on r.id = ur.rid
        where u.id = #{id} and u.is_deleted = 0 and ur.is_deleted = 0 and r.is_deleted = 0;
    </select>

    <select id="findByPage" resultMap="UserResultMap">
        select u.id, u.username, u.nickname, u.password, u.enabled, u.account_non_expired, u.account_non_locked, u.credentials_non_expired, u.updated_at, u.is_deleted,
        r.id as r_id, r.name as r_name, r.name_zh as r_name_zh, r.updated_at as r_updated_at, r.is_deleted as r_is_deleted
        from user u left join user_role ur on u.id = ur.uid left join role r on r.id = ur.rid
        <where>
            u.is_deleted = 0 and ur.is_deleted = 0 and r.is_deleted = 0
            <if test="nickname != null">
                and nickname like '%${nickname}%'
            </if>
            order by u.updated_at desc
        </where>
    </select>

</mapper>